import{_ as i,c as a,a0 as n,o as l}from"./chunks/framework.D5XSuxOt.js";const c=JSON.parse('{"title":"v8 垃圾回收","description":"","frontmatter":{},"headers":[],"relativePath":"m/gc.md","filePath":"m/gc.md","lastUpdated":1750241247000}'),e={name:"m/gc.md"};function p(h,s,t,k,r,d){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="v8-垃圾回收" tabindex="-1">v8 垃圾回收 <a class="header-anchor" href="#v8-垃圾回收" aria-label="Permalink to &quot;v8 垃圾回收&quot;">​</a></h1><p>v8 将堆内存分为新生代和老年代, 新生代中的对象存活时间较短, 老生代中的对象存活时间较长, 或常驻内存</p><p>垃圾回收中, 代际假说认为大多数对象存活时间较短</p><h2 id="新生代-gc-scavenge-算法" tabindex="-1">新生代 gc: Scavenge 算法 <a class="header-anchor" href="#新生代-gc-scavenge-算法" aria-label="Permalink to &quot;新生代 gc: Scavenge 算法&quot;">​</a></h2><p>在分代的基础上, 新生代的对象主要通过 Scavenge 算法进行垃圾回收</p><ol><li>Scavenge 算法将堆内存一分为二, 每个内存空间称为 semi-space</li><li>两个 semi-space 中, 只有一个处于使用状态, 称为 from-space; 另外一个处于闲置状态, 称为 to-space</li><li>分配对象时, 先在 from-space 中分配</li><li>垃圾回收时, 检查 from-space 中的存活对象, 复制存活对象到 to-space 中, 释放非存活对象占用的内存</li><li>复制后, 交换 from-space 和 to-space</li></ol><p>即新生代的 gc 就是将存活对象在两个 semi-space 间复制</p><h2 id="对象晋升-新生代-老年代" tabindex="-1">对象晋升 (新生代 =&gt; 老年代) <a class="header-anchor" href="#对象晋升-新生代-老年代" aria-label="Permalink to &quot;对象晋升 (新生代 =&gt; 老年代)&quot;">​</a></h2><p>对象从新生代 (from-space) 晋升到老年代的条件: 对象至少经历过 1 次 gc, 或 to-space 的内存使用率超过 25%</p><h2 id="老年代-gc-mark-sweep-标记清除-或-mark-compact-紧凑" tabindex="-1">老年代 gc: Mark-Sweep (标记清除) 或 Mark-Compact (紧凑) <a class="header-anchor" href="#老年代-gc-mark-sweep-标记清除-或-mark-compact-紧凑" aria-label="Permalink to &quot;老年代 gc: Mark-Sweep (标记清除) 或 Mark-Compact (紧凑)&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 引用计数法不能解决循环引用问题</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  a.ptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  b.ptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="mark-sweep-标记-清除-内存碎片化程度低时执行" tabindex="-1">Mark-Sweep (标记-清除) 内存碎片化程度低时执行 <a class="header-anchor" href="#mark-sweep-标记-清除-内存碎片化程度低时执行" aria-label="Permalink to &quot;Mark-Sweep (标记-清除) 内存碎片化程度低时执行&quot;">​</a></h3><p><strong>标记</strong></p><ul><li>构建一个根列表, 从根节点出发, 遍历所有可达对象, 标记为存活的; 不可达对象视为死亡的 (垃圾)</li><li>根节点包括全局对象; 函数的参数, 局部变量; 闭包引用的对象; DOM 元素等...</li></ul><p><strong>清除</strong>: 清除阶段直接回收死亡对象 (垃圾) 占用的内存, 可能导致内存碎片化</p><h3 id="mark-compact-标记-紧凑-内存碎片化程度高时执行" tabindex="-1">Mark-Compact (标记-紧凑) 内存碎片化程度高时执行 <a class="header-anchor" href="#mark-compact-标记-紧凑-内存碎片化程度高时执行" aria-label="Permalink to &quot;Mark-Compact (标记-紧凑) 内存碎片化程度高时执行&quot;">​</a></h3><p><strong>标记</strong></p><ul><li>构建一个根列表, 从根节点出发, 遍历所有可达对象, 标记为存活的; 不可达对象视为死亡的 (垃圾)</li><li>根节点包括全局对象; 函数的参数, 局部变量; 闭包引用的对象; DOM 元素等...</li></ul><p><strong>紧凑</strong>: 紧凑阶段先将存活的对象移动到连续内存区域, 以消除内存碎片; 再回收其他内存区域</p><h2 id="如何避免内存泄漏" tabindex="-1">如何避免内存泄漏 <a class="header-anchor" href="#如何避免内存泄漏" aria-label="Permalink to &quot;如何避免内存泄漏&quot;">​</a></h2><ol><li>少创建全局变量</li><li>手动清除定时器 (clearTimeout, clearInterval)</li><li>少使用闭包</li><li>清除 DOM 引用</li><li>WeakMap 和 WeakSet 的键名引用的对象都是弱引用, 不会增加引用计数</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>foo 函数返回一个匿名函数, 该匿名函数引用 foo 函数内部变量 a, 通过 <code>const bar = foo()</code>, 使得可以在 foo 函数外部访问 a; 一般的, 函数执行结束后, 该函数的内部变量就会被释放, 但是 foo 函数执行结束后, 返回 bar 函数, bar 函数有对 foo 函数内部变量 a 的引用, foo 函数的内部变量不会被释放, 显式 <code>bar = null</code>, foo 函数的内部变量才会被释放</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> map</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;btn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;btn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]]);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> record</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { btn: document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;btn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  document.body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;btn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>调用 <code>remove</code> 以移除 button 元素, 但是 map, record 中仍有对该 button 元素的引用, 需要手动 <code>map.delete(&#39;btn&#39;)</code> 和 <code>delete record.btn</code> (或 <code>record.btn = null</code>)</p><h2 id="weakmap-实验" tabindex="-1">WeakMap 实验 <a class="header-anchor" href="#weakmap-实验" aria-label="Permalink to &quot;WeakMap 实验&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// node --expose-gc # 允许手动 gc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">global.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 查看当前内存占用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">memoryUsage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().heapUsed; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 5399792</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WeakMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bigArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bigArray </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/** key */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /** value */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">memoryUsage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().heapUsed; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 13293888</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bigArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">memoryUsage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().heapUsed; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 13629312</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">global.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">memoryUsage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().heapUsed; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 5478168</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>`,27)]))}const g=i(e,[["render",p]]);export{c as __pageData,g as default};
