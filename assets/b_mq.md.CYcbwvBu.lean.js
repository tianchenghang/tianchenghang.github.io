import{_ as i,c as a,a0 as n,o as l}from"./chunks/framework.D5XSuxOt.js";const o=JSON.parse('{"title":"MQ 消息队列","description":"","frontmatter":{},"headers":[],"relativePath":"b/mq.md","filePath":"b/mq.md","lastUpdated":1750248664000}'),e={name:"b/mq.md"};function p(k,s,t,h,r,F){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="mq-消息队列" tabindex="-1">MQ 消息队列 <a class="header-anchor" href="#mq-消息队列" aria-label="Permalink to &quot;MQ 消息队列&quot;">​</a></h1><h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h2><ul><li>cluster 集群: 运行 kafka 实例的机器集合</li><li>broker 代理: 单个 kafka 实例</li><li>event 事件: 即消息, 包含: 事件键、事件值、事件时间戳</li><li>topic 主题: 事件类比日志记录, 主题类比日志文件, 分区类比日志目录</li><li>producer: 生产者, 将消息写入一个或多个主题的客户端</li><li>consumer: 消费者, 从一个或多个主题读取消息的客户端</li><li>partition 分区: 每个主题的事件分区存储, 事件键相同的事件会被存储到同一个分区; 为了保证按正确的顺序读取消息, 相同时刻, 只允许一个消费组成员从指定分区中读取消息</li><li>replica 副本: 一个分区通常会被复制到一个或多个代理, 以避免消息丢失, 实现高可用</li><li>leader 分区领导者: 虽然一个分区通常会被复制到一个或多个代理, 但是某个代理会被选举为该分区的领导者, 并且只有领导者可以读取或写入该分区</li><li>consumer group 消费者组: 由 groupId 标识的一组消费者实例的集合</li><li>group coordinator 消费者组协调员: 消费者组中的实例, 负责为消费者组成员分配消费的分区</li><li>offset 偏移量: 分区中消费的偏移量, 消费者消费后, 会提交该偏移量, 通知代理「本消费者组已消费该消息」; 如果消息者组重新启动, 将从提交的最高偏移量开始继续消费</li><li>rebalance 重新平衡: 当消费者加入或离开消费者组时, 该消费者组必须重新平衡, 即必须选择一个协调员, 重新为消费者组成员分配消费的分区</li><li>heartbeat 心跳: 分区领导者用于确认消费者是否存活的机制; 每个消费者必须每隔 <code>heartbeatInterval</code> 时间间隔向分区领导者发送心跳请求; 如果某个消费者在 <code>sessionTimeout</code> 时间间隔内未发送心跳请求, 则视为死亡, 并从消费者组中移除, 进而触发重新平衡</li></ul><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 示例事件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Event</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Alice&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Event</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> value:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Made a payment of </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$200</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to Bob&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Event</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> timestamp:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Jun. 25, 2020 at 2:06 p.m.&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="partition-分区设计" tabindex="-1">partition 分区设计 <a class="header-anchor" href="#partition-分区设计" aria-label="Permalink to &quot;partition 分区设计&quot;">​</a></h3><ul><li>负载均衡、提高吞吐量、提高可扩展性</li><li>保存消息的副本, 实现高可用</li></ul><h2 id="搭建-kafka-集群" tabindex="-1">搭建 kafka 集群 <a class="header-anchor" href="#搭建-kafka-集群" aria-label="Permalink to &quot;搭建 kafka 集群&quot;">​</a></h2><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@github.com:conduktor/kafka-stack-docker-compose.git</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Full stack</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> full-stack.yml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> full-stack.yml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> down</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Single Zookeeper / Single Kafka</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zk-single-kafka-single.yml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zk-single-kafka-single.yml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> down</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Single Zookeeper / Multiple Kafka</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zk-single-kafka-multiple.yml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zk-single-kafka-multiple.yml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> down</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Multiple Zookeeper / Single Kafka</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zk-multiple-kafka-single.yml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zk-multiple-kafka-single.yml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> down</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Multiple Zookeeper / Multiple Kafka</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zk-multiple-kafka-multiple.yml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zk-multiple-kafka-multiple.yml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> down</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>`,8)]))}const c=i(e,[["render",p]]);export{o as __pageData,c as default};
